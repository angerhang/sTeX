# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
DeclareOption('langfiles',sub {AssignValue('smultiling_langfiles',1,'global');});
ProcessOptions();
RequirePackage('modules');
RawTeX('
\newenvironment{modsig}[2][]{%
\def\@test{#1}\ifx\@test\@empty\begin{module}[id=#2]\else\begin{module}[id=#2,#1]\fi}
{\end{module}}

\newenvironment{viewsig}[4][]{\def\@test{#1}\ifx\@test\@empty%
\begin{view}[id=#2,ext=tex]{#3}{#4}\else\begin{view}[id=#2,#1,ext=tex]{#3}{#4}\fi}
{\end{view}}
\newenvironment{mhviewsig}[4][]{\def\@test{#1}\ifx\@test\@empty%
\begin{mhview}[id=#2,ext=tex]{#3}{#4}\else\begin{mhview}[id=#2,#1,ext=tex]{#3}{#4}\fi}
{\end{mhview}}
');
DefConstructor('\symi OptionalMatch:* {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#2'/>");
DefConstructor('\symii OptionalMatch:* {} {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#2-#3'/>");
DefConstructor('\symiii OptionalMatch:* {} {} {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#2-#3-#4'/>");
DefKeyVal('modnl','title','Semiverbatim');
DefKeyVal('modnl','load','Semiverbatim');
DefKeyVal('modnl','creators','Semiverbatim');
DefKeyVal('modnl','contributors','Semiverbatim');
DefKeyVal('modnl','primary','Semiverbatim');
DefEnvironment('{modnl} OptionalKeyVals:modnl {}{}',
         '?#excluded()(<omdoc:theory '
         . 'xml:id="#2.#3">'
         .   '?&defined(&GetKeyVal(#1,"creators"))(<dc:creator>&GetKeyVal(#1,"creators")</dc:creator>)()'
         .   '?&defined(&GetKeyVal(#1,"title"))(<dc:title>&GetKeyVal(#1,"title")</dc:title>)()'
         .   '?&defined(&GetKeyVal(#1,"contributors"))(<dc:contributor>&GetKeyVal(#1,"contributors")</dc:contributor>)()'
         .   '<omdoc:imports from="?&GetKeyVal(#1,"load")(&canonical_omdoc_path(&GetKeyVal(#1,"load")))()##2"/>'
         .   '#body'
         . '</omdoc:theory>)',
  afterDigestBegin=>sub {
    my ($stomach, $whatsit) = @_;
    my $keyval = $whatsit->getArg(1);
    my $signature = ToString($whatsit->getArg(2));
    my $language = ToString($whatsit->getArg(3));
    if ($keyval) {
      # If we're not given load, AND the langfiles option is in effect,
      # default to #2
      if ((! $keyval->getValue('load')) && (LookupValue('smultiling_langfiles'))) {
        $keyval->setValue('load',$signature); }
      # Always load a TeX file
      $keyval->setValue('ext','tex');
      AssignValue('modnl_signature',$signature);
      $keyval->setValue('id',"$signature.$language"); }
    module_afterDigestBegin(@_);
    importmoduleI(@_);
    AssignValue(multiling => 1);
    return; },
  afterDigest =>\&module_afterDigest );
DefKeyVal('mhmodnl','title','Semiverbatim');
DefKeyVal('mhmodnl','repos','Semiverbatim');
DefKeyVal('mhmodnl','path','Semiverbatim');
DefKeyVal('mhmodnl','creators','Semiverbatim');
DefKeyVal('mhmodnl','contributors','Semiverbatim');
DefKeyVal('mhmodnl','primary','Semiverbatim');
DefEnvironment('{mhmodnl} OptionalKeyVals:mhmodnl {}{}',
         '?#excluded()(<omdoc:theory '
         . 'xml:id="#2.#3" >'
         .   '?&defined(&GetKeyVal(#1,"creators"))(<dc:creator>&GetKeyVal(#1,"creators")</dc:creator>)()'
         .   '?&defined(&GetKeyVal(#1,"title"))(<dc:title>&GetKeyVal(#1,"title")</dc:title>)()'
         .   '?&defined(&GetKeyVal(#1,"contributors"))(<dc:contributor>&GetKeyVal(#1,"contributors")</dc:contributor>)()'
         .   '<omdoc:imports from="?&GetKeyVal(#1,"load")(&canonical_omdoc_path(&GetKeyVal(#1,"load")))()##2"/>'
         .   '#body'
         . '</omdoc:theory>)',
  afterDigestBegin=>sub {
    my ($stomach, $whatsit) = @_;
    my $keyval = $whatsit->getArg(1);
    my $signature = ToString($whatsit->getArg(2));
    my $language = ToString($whatsit->getArg(3));
    my $repos = ToString(GetKeyVal($keyval,'torepos'));
    my $current_repos = LookupValue('current_repos');
    if (!$repos) { $repos = $current_repos; }
    my $defpaths = LookupValue('defpath');
    my $load_path = ($$defpaths{MathHub}).$repos.'/source/'.$signature;

    if ($keyval) {
      # If we're not given load, AND the langfiles option is in effect,
      # default to #2
      if ((! $keyval->getValue('path')) && (LookupValue('smultiling_langfiles'))) {
        $keyval->setValue('load',$load_path); }
      # Always load a TeX file
      $keyval->setValue('ext','tex');
      $keyval->setValue('id',"$signature.$language"); }
    module_afterDigestBegin(@_);
    importmoduleI(@_);
    return; },
  afterDigest=>sub {
    module_afterDigest(@_); });
RawTeX('
\newenvironment{viewnl}[5][]{\def\@test{#1}\ifx\@test\@empty%
\begin{viewsketch}[id=#2.#3,ext=tex]{#4}{#5}\else%
\begin{viewsketch}[id=#2.#3,#1,ext=tex]{#4}{#5}\fi}
{\end{viewsketch}}
\newenvironment{mhviewnl}[5][]{\def\@test{#1}\ifx\@test\@empty%
\begin{mhviewsketch}[id=#2.#3,ext=tex]{#4}{#5}\else%
\begin{mhviewsketch}[id=#2.#3,#1,ext=tex]{#4}{#5}\fi}
{\end{mhviewsketch}}
');
RawTeX('
\def\@instring#1#2{TT\fi\begingroup\edef\x{\endgroup\noexpand\in@{#1}{#2}}\x\ifin@}
\newcommand\mtrefi[2][]{\if\@instring{?}{#1}\@mtref #1\relax{#2}\else\termref[cd=#1]{#2}\fi}
\def\@mtref#1?#2\relax{\termref[cd=#1,name=#2]}
\newcommand\mtrefii[3][]{\mtrefi[#1]{#2 #3}}
\newcommand\mtrefiii[4][]{\mtrefi[#1]{#2 #3 #4}}
');
1;
